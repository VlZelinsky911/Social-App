import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { login } from "../../features/auth/authSlice";
import "./RegistrationForm.scss";
import { supabase } from "../../services/supabaseClient";


const registrationSchema = z
  .object({
    firstName: z.string().min(2, "–ú—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏"),
    email: z.string().email("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email"),
    password: z
      .string()
      .min(6, "–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤")
      .regex(/[A-Z]/, "–ú–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É –≤–µ–ª–∏–∫—É –ª—ñ—Ç–µ—Ä—É")
      .regex(/[a-z]/, "–ú–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É –º–∞–ª—É –ª—ñ—Ç–µ—Ä—É")
      .regex(/[0-9]/, "–ú–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É")
      .regex(/[^a-zA-Z0-9]/, "–ú–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª"),
    confirmPassword: z.string(),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å",
    path: ["confirmPassword"],
  });

type FormData = z.infer<typeof registrationSchema>;

const UserRegistration = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  
  const { register, handleSubmit, formState: { errors } } = useForm<FormData>({
    resolver: zodResolver(registrationSchema),
  });

  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [message, setMessage] = useState<string | null>(null);
	const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const checkUser = async () => {
      const { data } = await supabase.auth.getSession();
      if (data?.session) {
        dispatch(login());
        navigate("/"); 
      }
    };
    checkUser();
  }, [dispatch, navigate]);

  const onSubmit = async (data: FormData) => {
    setMessage(null);
		setIsLoading(true);
    try {
      const { data: signUpData, error } = await supabase.auth.signUp({
        email: data.email,
        password: data.password,
      });

      if (error) throw error;
      if (!signUpData.user) throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");

			const { error: profileError } = await supabase
      .from("profiles")
      .insert([{ 
        id: signUpData.user.id,
        full_name: data.firstName,
        email: data.email,
      }]);

    if (profileError) throw profileError;


			setMessage("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—à—Ç—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.");


      const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
        email: data.email,
        password: data.password,
      });

      if (loginError) throw loginError;

      dispatch(login());
      navigate("/");

    } catch (error: any) {
      setMessage(error.message);
    } finally {
			setIsLoading(false);
		}
  };

  return (
    <div className="registration-container">
      <h1 className="site-title">GN</h1>
      <div className="registration-box">
        <h2 className="title">–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</h2>
        {message && <p className="success">{message}</p>}
        <form onSubmit={handleSubmit(onSubmit)} className="registration-form">
          <div className="input-group">
            <input type="text" placeholder="–Ü–º'—è" {...register("firstName")} />
            <p className="error">{errors.firstName?.message}</p>
          </div>

          <div className="input-group">
            <input type="text" placeholder="–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞" {...register("email")} />
            <p className="error">{errors.email?.message}</p>
          </div>

          <div className="input-group password-group">
            <input
              type={showPassword ? "text" : "password"}
              placeholder="–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å"
              {...register("password")}
            />
            <button type="button" className="toggle-password" onClick={() => setShowPassword(!showPassword)}>
              {showPassword ? "üîí" : "üëÅ"}
            </button>
            <p className="error">{errors.password?.message}</p>
          </div>

          <div className="input-group password-group">
            <input
              type={showConfirmPassword ? "text" : "password"}
              placeholder="–ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –ø–∞—Ä–æ–ª—å"
              {...register("confirmPassword")}
            />
            <button type="button" className="toggle-password" onClick={() => setShowConfirmPassword(!showConfirmPassword)}>
              {showConfirmPassword ? "üîí" : "üëÅ"}
            </button>
            <p className="error">{errors.confirmPassword?.message}</p>
          </div>

          <button type="submit" className="submit-btn"> {isLoading ? "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..." : "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è"}</button>
        </form>
      </div>
    </div>
  );
};

export default UserRegistration;
