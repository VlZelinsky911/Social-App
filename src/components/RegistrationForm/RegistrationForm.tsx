import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { object, z } from "zod";
import "./RegistrationForm.scss";

const registrationSchema = z.object({
  firstName: z.string().min(2, "–ú—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏"),
  lastName: z.string().min(2, "–ú—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏"),
  emailOrPhone: z.string().email("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email"),
  password: z.string().min(6, "–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤"),
  birthDate: z.string().nonempty("–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"),
  gender: z.enum(["male", "female", "other"], { required_error: "–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å" }),
});

type FormData = z.infer<typeof registrationSchema>;

const RegistrationForm = () => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<FormData>({
    resolver: zodResolver(registrationSchema),
  });

  const onSubmit = (data: FormData) => {
    console.log("–§–æ—Ä–º–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞:", data);
  };

  return (
    <div className="registration-container">
      {Object.keys(errors).length === 0 && <h1 className="site-title">GN</h1>}
      <div className="registration-box">
        <h2 className="title">–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</h2>
        <form onSubmit={handleSubmit(onSubmit)} className="registration-form">
          <div className="name-fields">
            <div className="input-group">
              <input type="text" placeholder="–Ü–º'—è" {...register("firstName")} />
              <p className="error">{errors.firstName?.message}</p>
            </div>
            <div className="input-group">
              <input type="text" placeholder="–ü—Ä—ñ–∑–≤–∏—â–µ" {...register("lastName")} />
              <p className="error">{errors.lastName?.message}</p>
            </div>
          </div>

          <div className="input-group">
            <input type="text" placeholder="–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞ –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω" {...register("emailOrPhone")} />
            <p className="error">{errors.emailOrPhone?.message}</p>
          </div>

          <div className="input-group">
            <input type="password" placeholder="–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å" {...register("password")} />
            <p className="error">{errors.password?.message}</p>
          </div>

          <div className="input-group">
            <select {...register("birthDate")}>
              <option className="sOption" value="">–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è</option>
              <option className="sOption" value="2000-01-01">1 –°—ñ—á–Ω—è 2000</option>
              <option className="sOption" value="1995-05-20">20 –¢—Ä–∞–≤–Ω—è 1995</option>
              <option className="sOption" value="1990-07-15">15 –õ–∏–ø–Ω—è 1990</option>
            </select>
            <p className="error">{errors.birthDate?.message}</p>
          </div>

          <div className="gender-options">
            <label>
              <input type="radio" value="male" {...register("gender")} />
              –ß–æ–ª–æ–≤—ñ–∫
            </label>
						<label>
              <input type="radio" value="other" {...register("gender")} />
              ü´£
            </label>
            <label>
              <input type="radio" value="female" {...register("gender")} />
              –ñ—ñ–Ω–∫–∞
            </label>
          </div>
          <p className="error">{errors.gender?.message}</p>

          <button type="submit" className="submit-btn">–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è</button>
        </form>
      </div>
    </div>
  );
};

export default RegistrationForm;
